generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// model User {
//   id String @id @default(uuid()) 
//   username String @unique
//   profilePhoto  String
//   externalUserId String @unique
//   admin Admin @default(User)
  
//   orders Order[]
//   events Event[] @relation("EventCreator")
//   blogs Blog[] @relation("BlogCreator")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model User {
  id            String    @id @default(cuid())
  username      String?
  password     String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  name String?
  collegeName String?
  yearOfPassing String?
  city String?
  degree String?
  stream String?
  dob String?
  skill String?

  orders Order[]
  blogs Blog[] @relation("BlogCreator")
  events Event[] @relation("EventCreator")
  
  admin         Admin     @default(User)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
}
enum Admin {
  Superadmin
  Admin
  User
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}





model Event {
  id String @id @default(uuid()) 
  title String
  date DateTime
  startTime String?
  endTime String?
  meeturl String?
  venue String?
  description String
  imageUrl String
  location String
  slug String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price Float?
  

  creatorId String 
  creator User @relation(name: "EventCreator", fields: [creatorId], references: [id])

  Order Order[]
  @@index([id], name: "id_index")
  @@index([creatorId], name: "creatorId_index")
  @@index([title], name: "search_index")  
}


model Blog {
  id String @id @default(uuid()) 
  title String
  content String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String 
  creator User @relation(name: "BlogCreator", fields: [creatorId], references: [id])
}


model Order {
  id String @id @default(uuid()) 
  amount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  eventId String
  event Event @relation(fields: [eventId], references: [id])
  user User @relation(fields: [userId], references: [id])
  @@index([id], name: "id_index")
  @@index([userId], name: "userId_index")
  @@index([amount], name: "amount_index")
}

model CampusAmbassador {
  id String @id @default(uuid()) 
  fullname String
  collegeEmail String
  collegeName String
  collegeLocation String
  graduationYear String
  inCodingClub String?
  stream String?
  strenghtStem String?


  createdAt DateTime @default(now())
  
}


